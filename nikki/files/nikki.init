#!/bin/sh /etc/rc.common

START=99
STOP=10
USE_PROCD=1

. "$IPKG_INSTROOT/lib/functions/network.sh"
. "$IPKG_INSTROOT/etc/nikki/scripts/include.sh"

extra_command 'update_subscription' 'Update subscription by section id'

boot() {
	# prepare files
	prepare_files
	# load config
	config_load nikki
	# start delay
	local enabled start_delay
	config_get_bool enabled "config" "enabled" 0
	config_get start_delay "config" "start_delay" 0
	if [[ "$enabled" == 1 && "$start_delay" -gt 0 ]]; then
		log "App" "Start after $start_delay seconds."
		sleep "$start_delay"
	fi
	# start
	start
}

start_service() {
	# prepare files
	prepare_files
	# load config
	config_load nikki
	# check if enabled
	local enabled
	config_get_bool enabled "config" "enabled" 0
	if [ "$enabled" == 0 ]; then
		log "App" "Disabled."
		log "App" "Exit."
		return
	fi
	# start
	log "App" "Enabled."
	log "App" "Start."
	# get config
	## app config
	local scheduled_restart cron_expression profile mixin test_profile fast_reload
	config_get_bool scheduled_restart "config" "scheduled_restart" 0
	config_get cron_expression "config" "cron_expression"
	config_get profile "config" "profile"
	config_get_bool mixin "config" "mixin" 0
	config_get_bool test_profile "config" "test_profile" 0
	config_get_bool fast_reload "config" "fast_reload" 0
	## proxy config
	### transparent proxy
	local tcp_transparent_proxy_mode udp_transparent_proxy_mode
	config_get_bool transparent_proxy "proxy" "transparent_proxy" 0
	config_get tcp_transparent_proxy_mode "proxy" "tcp_transparent_proxy_mode" "tproxy"
	config_get udp_transparent_proxy_mode "proxy" "udp_transparent_proxy_mode" "tproxy"
	## mixin config
	### general
	local mode match_process outbound_interface ipv6 unify_delay tcp_concurrent tcp_keep_alive_idle tcp_keep_alive_interval log_level
	config_get mode "mixin" "mode" "rule"
	config_get match_process "mixin" "match_process" "off"
	config_get outbound_interface "mixin" "outbound_interface"
	config_get_bool ipv6 "mixin" "ipv6" 0
	config_get_bool unify_delay "mixin" "unify_delay" 0
	config_get_bool tcp_concurrent "mixin" "tcp_concurrent" 0
	config_get tcp_keep_alive_idle "mixin" "tcp_keep_alive_idle" 600
	config_get tcp_keep_alive_interval "mixin" "tcp_keep_alive_interval" 15
	config_get log_level "mixin" "log_level" "info"
	### external control
	local ui_path ui_name ui_url api_port api_secret selection_cache
	config_get ui_path "mixin" "ui_path" "ui"
	config_get ui_name "mixin" "ui_name"
	config_get ui_url "mixin" "ui_url"
	config_get api_port "mixin" "api_port" "9090"
	config_get api_secret "mixin" "api_secret" "666666"
	config_get_bool selection_cache "mixin" "selection_cache" 0
	### inbound
	local allow_lan http_port socks_port mixed_port redir_port tproxy_port authentication
	config_get_bool allow_lan "mixin" "allow_lan" 0
	config_get http_port "mixin" "http_port" "8080"
	config_get socks_port "mixin" "socks_port" "1080"
	config_get mixed_port "mixin" "mixed_port" "7890"
	config_get redir_port "mixin" "redir_port" "7891"
	config_get tproxy_port "mixin" "tproxy_port" "7892"
	config_get_bool authentication "mixin" "authentication" 0
	### tun
	local tun_device tun_stack tun_mtu tun_gso tun_gso_max_size tun_dns_hijack tun_endpoint_independent_nat
	config_get tun_device "mixin" "tun_device" "nikki"
	config_get tun_stack "mixin" "tun_stack" "system"
	config_get tun_mtu "mixin" "tun_mtu" "9000"
	config_get_bool tun_gso "mixin" "tun_gso" 0
	config_get tun_gso_max_size "mixin" "tun_gso_max_size" "65536"
	config_get_bool tun_dns_hijack "mixin" "tun_dns_hijack" 0
	config_get_bool tun_endpoint_independent_nat "mixin" "tun_endpoint_independent_nat" 0
	### dns
	local dns_port dns_mode fake_ip_range fake_ip_filter fake_ip_filter_mode fake_ip_cache dns_respect_rules dns_doh_prefer_http3 dns_ipv6 dns_system_hosts dns_hosts hosts dns_nameserver dns_nameserver_policy
	config_get dns_port "mixin" "dns_port" "1053"
	config_get dns_mode "mixin" "dns_mode" "redir-host"
	config_get fake_ip_range "mixin" "fake_ip_range" "198.18.0.1/16"
	config_get_bool fake_ip_filter "mixin" "fake_ip_filter" 0
	config_get fake_ip_filter_mode "mixin" "fake_ip_filter_mode" "blacklist"
	config_get_bool fake_ip_cache "mixin" "fake_ip_cache" 0
	config_get_bool dns_respect_rules "mixin" "dns_respect_rules" 0
	config_get_bool dns_doh_prefer_http3 "mixin" "dns_doh_prefer_http3" 0
	config_get_bool dns_ipv6 "mixin" "dns_ipv6" 0
	config_get_bool dns_system_hosts "mixin" "dns_system_hosts" 0
	config_get_bool dns_hosts "mixin" "dns_hosts" 0
	config_get_bool hosts "mixin" "hosts" 0
	config_get_bool dns_nameserver "mixin" "dns_nameserver" 0
	config_get_bool dns_nameserver_policy "mixin" "dns_nameserver_policy" 0
	### sniffer
	local sniffer sniffer_sniff_dns_mapping sniffer_sniff_pure_ip sniffer_overwrite_destination sniffer_force_domain_name sniffer_ignore_domain_name sniffer_sniff
	config_get_bool sniffer "mixin" sniffer 0
	config_get_bool sniffer_sniff_dns_mapping "mixin" sniffer_sniff_dns_mapping 0
	config_get_bool sniffer_sniff_pure_ip "mixin" sniffer_sniff_pure_ip 0
	config_get_bool sniffer_overwrite_destination "mixin" sniffer_overwrite_destination 0
	config_get_bool sniffer_force_domain_name "mixin" sniffer_force_domain_name 0
	config_get_bool sniffer_ignore_domain_name "mixin" sniffer_ignore_domain_name 0
	config_get_bool sniffer_sniff "mixin" sniffer_sniff 0
	### rule
	local rule rule_provider
	config_get_bool rule "mixin" "rule" 0
	config_get_bool rule_provider "mixin" "rule_provider" 0
	### geox
	local geoip_format geodata_loader geosite_url geoip_mmdb_url geoip_dat_url geoip_asn_url geox_auto_update geox_update_interval
	config_get geoip_format "mixin" "geoip_format" "mmdb"
	config_get geodata_loader "mixin" "geodata_loader" "memconservative"
	config_get geosite_url "mixin" "geosite_url"
	config_get geoip_mmdb_url "mixin" "geoip_mmdb_url"
	config_get geoip_dat_url "mixin" "geoip_dat_url"
	config_get geoip_asn_url "mixin" "geoip_asn_url"
	config_get_bool geox_auto_update "mixin" "geox_auto_update" 0
	config_get geox_update_interval "mixin" "geox_update_interval" "24"
	### mixin file content
	local mixin_file_content
	config_get_bool mixin_file_content "mixin" "mixin_file_content" 0
	## environment variable
	local disable_safe_path_check disable_loopback_detector disable_quic_go_gso disable_quic_go_ecn
	config_get_bool disable_safe_path_check "env" "disable_safe_path_check" 0
	config_get_bool disable_loopback_detector "env" "disable_loopback_detector" 0
	config_get_bool disable_quic_go_gso "env" "disable_quic_go_gso" 0
	config_get_bool disable_quic_go_ecn "env" "disable_quic_go_ecn" 0
	# prepare
	local outbound_device
	if [ -n "$outbound_interface" ]; then
		network_get_device outbound_device "$outbound_interface"
	fi
	local tproxy_enable; tproxy_enable=0
	if [[ "$tcp_transparent_proxy_mode" == "tproxy" || "$udp_transparent_proxy_mode" == "tproxy" ]]; then
		tproxy_enable=1
	fi
	local tun_enable; tun_enable=0
	if [[ "$tcp_transparent_proxy_mode" == "tun" || "$udp_transparent_proxy_mode" == "tun" ]]; then
		tun_enable=1
	fi
	# get profile
	if [[ "$profile" == "file:"* ]]; then
		local profile_name; profile_name=$(basename "${profile/file:/}")
		local profile_file; profile_file="$PROFILES_DIR/$profile_name"
		log "Profile" "Use file: $profile_name."
		if [ ! -f "$profile_file" ]; then
			log "Profile" "File not found."
			log "App" "Exit."
			return
		fi
		cp -f "$profile_file" "$RUN_PROFILE_PATH"
	elif [[ "$profile" == "subscription:"* ]]; then
		local subscription_section; subscription_section="${profile/subscription:/}"
		local subscription_name subscription_prefer
		config_get subscription_name "$subscription_section" "name"
		config_get subscription_prefer "$subscription_section" "prefer" "remote"
		log "Profile" "Use subscription: $subscription_name."
		local subscription_file; subscription_file="$SUBSCRIPTIONS_DIR/$subscription_section.yaml"
		if [ "$subscription_prefer" == "remote" ] || [[ "$subscription_prefer" == "local" && ! -f "$subscription_file" ]]; then
			update_subscription "$subscription_section"
		fi
		if [ ! -f "$subscription_file" ]; then
			log "Profile" "Subscription file not found."
			log "App" "Exit."
			return
		fi
		cp -f "$subscription_file" "$RUN_PROFILE_PATH"
	else
		log "Profile" "No profile/subscription selected."
		log "App" "Exit."
		return
	fi
	# mixin
	if [ "$mixin" == 0 ]; then
		log "Mixin" "Disabled."
		log "Mixin" "Mixin neccesary config."
	else
		log "Mixin" "Enabled."
		log "Mixin" "Mixin all config."
	fi
	mixin="$mixin" \
	log_level="$log_level" mode="$mode" match_process="$match_process" outbound_device="$outbound_device" ipv6="$ipv6" unify_delay="$unify_delay" tcp_concurrent="$tcp_concurrent" tcp_keep_alive_idle="$tcp_keep_alive_idle" tcp_keep_alive_interval="$tcp_keep_alive_interval" \
	ui_path="$ui_path" ui_name="$ui_name" ui_url="$ui_url" api_listen="0.0.0.0:$api_port" api_secret="$api_secret" selection_cache="$selection_cache" \
	allow_lan="$allow_lan" http_port="$http_port" socks_port="$socks_port" mixed_port="$mixed_port" redir_port="$redir_port" tproxy_port="$tproxy_port" authentication="$authentication" \
	tun_enable="$tun_enable" tun_stack="$tun_stack" tun_device="$tun_device" tun_mtu="$tun_mtu" tun_gso="$tun_gso" tun_gso_max_size="$tun_gso_max_size" tun_dns_hijack="$tun_dns_hijack" tun_endpoint_independent_nat="$tun_endpoint_independent_nat" \
	dns_listen="0.0.0.0:$dns_port" dns_mode="$dns_mode" fake_ip_range="$fake_ip_range" fake_ip_cache="$fake_ip_cache" fake_ip_filter="$fake_ip_filter" fake_ip_filter_mode="$fake_ip_filter_mode" \
	dns_respect_rules="$dns_respect_rules" dns_doh_prefer_http3="$dns_doh_prefer_http3" dns_ipv6="$dns_ipv6" dns_system_hosts="$dns_system_hosts" dns_hosts="$dns_hosts" \
	hosts="$hosts" dns_nameserver="$dns_nameserver" dns_nameserver_policy="$dns_nameserver_policy" \
	sniffer="$sniffer" sniffer_sniff_dns_mapping="$sniffer_sniff_dns_mapping" sniffer_sniff_pure_ip="$sniffer_sniff_pure_ip" sniffer_overwrite_destination="$sniffer_overwrite_destination" \
	sniffer_force_domain_name="$sniffer_force_domain_name" sniffer_ignore_domain_name="$sniffer_ignore_domain_name" sniffer_sniff="$sniffer_sniff" \
	geoip_format="$geoip_format" geodata_loader="$geodata_loader" geosite_url="$geosite_url" geoip_mmdb_url="$geoip_mmdb_url" geoip_dat_url="$geoip_dat_url" geoip_asn_url="$geoip_asn_url" \
	geox_auto_update="$geox_auto_update" geox_update_interval="$geox_update_interval" \
	yq -M -i --from-file "$MIXIN_YQ" "$RUN_PROFILE_PATH"
	if [ "$authentication" == 1 ]; then
		config_foreach mixin_authentications "authentication"
	fi
	if [ "$tun_dns_hijack" == 1 ]; then
		config_list_foreach "mixin" "tun_dns_hijacks" mixin_tun_dns_hijacks
	fi
	if [ "$rule_provider" == 1 ]; then
		config_foreach mixin_rule_providers "rule_provider"
	fi
	if [ "$rule" == 1 ]; then
		config_foreach mixin_rules "rule"
		yq -M -i '.rules = .nikki-rules + .rules | del(.nikki-rules)' "$RUN_PROFILE_PATH"
	fi
	if [ "$mixin" == 1 ]; then
		if [ "$fake_ip_filter" == 1 ]; then
			config_list_foreach "mixin" "fake_ip_filters" mixin_fake_ip_filters
		fi
		if [ "$hosts" == 1 ]; then
			config_foreach mixin_hosts "hosts"
		fi
		if [ "$dns_nameserver" == 1 ]; then
			config_foreach mixin_nameservers "nameserver"
		fi
		if [ "$dns_nameserver_policy" == 1 ]; then
			config_foreach mixin_nameserver_policies "nameserver_policy"
		fi
		if [ "$sniffer_force_domain_name" == 1 ]; then
			config_list_foreach "mixin" "sniffer_force_domain_names" mixin_sniffer_domain_names "force-domain"
		fi
		if [ "$sniffer_ignore_domain_name" == 1 ]; then
			config_list_foreach "mixin" "sniffer_ignore_domain_names" mixin_sniffer_domain_names "skip-domain"
		fi
		if [ "$sniffer_sniff" == 1 ]; then
			config_foreach mixin_sniffs "sniff"
		fi
	fi
	if [ "$mixin_file_content" == 1 ]; then
		if [ -s "$MIXIN_FILE_PATH" ]; then
			yq -M -i ea '. as $item ireduce ({}; . * $item ) | ... comments=""' "$RUN_PROFILE_PATH" "$MIXIN_FILE_PATH"
		fi
	fi
	# test profile
	if [ "$test_profile" == 1 ]; then
		log "Profile" "Testing..."
		if ($PROG -d "$RUN_DIR" -t >> "$CORE_LOG_PATH" 2>&1); then
			log "Profile" "Test passed!"
		else
			log "Profile" "Test failed!"
			log "Profile" "Please check the core log to find out the problem."
			log "App" "Exit."
			return
		fi
	fi
	# start core
	log "Core" "Start."
	procd_open_instance nikki

	procd_set_param command /bin/sh -c "$PROG -d $RUN_DIR >> $CORE_LOG_PATH 2>&1"
	procd_set_param file "$RUN_PROFILE_PATH"
	procd_set_param env SKIP_SAFE_PATH_CHECK="$disable_safe_path_check" DISABLE_LOOPBACK_DETECTOR="$disable_loopback_detector" QUIC_GO_DISABLE_GSO="$disable_quic_go_gso" QUIC_GO_DISABLE_ECN="$disable_quic_go_ecn"
	if [ "$fast_reload" == 1 ]; then
		procd_set_param reload_signal HUP
	fi
	procd_set_param respawn
	procd_set_param user "$NIKKI_USER"
	procd_set_param group "$NIKKI_GROUP"

	procd_set_param limits core="unlimited" nofile="1048576 1048576"

	procd_close_instance
	# cron
	if [[ "$scheduled_restart" == 1 && -n "$cron_expression" ]]; then
		log "App" "Set scheduled restart."
		echo "$cron_expression /etc/init.d/nikki restart #nikki" >> "/etc/crontabs/root"
		/etc/init.d/cron restart
	fi
	# set started flag
	touch "$STARTED_FLAG"
}

service_started() {
	# check if started
	if [ ! -f "$STARTED_FLAG" ]; then
		return
	fi
	# load config
	config_load nikki
	# check if transparent proxy enabled
	local transparent_proxy
	config_get_bool transparent_proxy "proxy" "transparent_proxy" 0
	if [ "$transparent_proxy" == 0 ]; then
		log "Transparent Proxy" "Disabled."
		return
	fi
	# get config
	## mixin
	### tun
	local tun_device
	config_get tun_device "mixin" "tun_device" "nikki"
	## proxy config
	### transparent proxy
	local tcp_transparent_proxy_mode udp_transparent_proxy_mode ipv4_dns_hijack ipv6_dns_hijack ipv4_proxy ipv6_proxy router_proxy lan_proxy
	config_get tcp_transparent_proxy_mode "proxy" "tcp_transparent_proxy_mode" "redirect"
	config_get udp_transparent_proxy_mode "proxy" "udp_transparent_proxy_mode" "tun"
	config_get_bool ipv4_dns_hijack "proxy" "ipv4_dns_hijack" 0
	config_get_bool ipv6_dns_hijack "proxy" "ipv6_dns_hijack" 0
	config_get_bool ipv4_proxy "proxy" "ipv4_proxy" 0
	config_get_bool ipv6_proxy "proxy" "ipv6_proxy" 0
	config_get_bool router_proxy "proxy" "router_proxy" 0
	config_get_bool lan_proxy "proxy" "lan_proxy" 0
	### access control
	local access_control_mode 
	config_get access_control_mode "proxy" "access_control_mode"
	### bypass
	local bypass_user bypass_group bypass_china_mainland_ip proxy_tcp_dport proxy_udp_dport bypass_dscp
	config_get bypass_user "proxy" "bypass_user"
	config_get bypass_group "proxy" "bypass_group"
	config_get_bool bypass_china_mainland_ip "proxy" "bypass_china_mainland_ip" 0
	config_get proxy_tcp_dport "proxy" "proxy_tcp_dport" "0-65535"
	config_get proxy_udp_dport "proxy" "proxy_udp_dport" "0-65535"
	config_get bypass_dscp "proxy" "bypass_dscp"
	# prepare
	local tproxy_enable; tproxy_enable=0
	if [[ "$tcp_transparent_proxy_mode" == "tproxy" || "$udp_transparent_proxy_mode" == "tproxy" ]]; then
		tproxy_enable=1
	fi
	local tun_enable; tun_enable=0
	if [[ "$tcp_transparent_proxy_mode" == "tun" || "$udp_transparent_proxy_mode" == "tun" ]]; then
		tun_enable=1
	fi
	# transparent proxy
	log "Transparent Proxy" "Enabled."
	log "Transparent Proxy" "TCP Mode: $tcp_transparent_proxy_mode."
	log "Transparent Proxy" "UDP Mode: $udp_transparent_proxy_mode."
	# wait for tun device online
	if [ "$tun_enable" == 1 ]; then
		log "Transparent Proxy" "Waiting for tun device online..."
		local tun_timeout; tun_timeout=60
		local tun_interval; tun_interval=1
		while [ "$tun_timeout" -gt 0 ]; do
			if (ip link show dev "$tun_device" > /dev/null 2>&1); then
				if [ $(ip -json addr show dev "$tun_device" | tun_device="$tun_device" yq -M '.[] | select(.ifname = strenv(tun_device)) | .addr_info | length') -gt 0 ]; then
					log "Transparent Proxy" "Tun device is online."
					break
				fi
			fi
			tun_timeout=$((tun_timeout - tun_interval))
			sleep "$tun_interval"
		done
		if [ "$tun_timeout" -le 0 ]; then
			log "Transparent Proxy" "Waiting timeout, tun device is not online."
			log "App" "Exit."
			return
		fi
	fi
	# prepare
	if [ "$tproxy_enable" == 1 ]; then
		if [ "$ipv4_proxy" == 1 ]; then
			ip -4 route add local default dev lo table "$TPROXY_ROUTE_TABLE"
			ip -4 rule add pref "$TPROXY_RULE_PREF" fwmark "$TPROXY_FW_MARK" table "$TPROXY_ROUTE_TABLE"
		fi
		if [ "$ipv6_proxy" == 1 ]; then
			ip -6 route add local default dev lo table "$TPROXY_ROUTE_TABLE"
			ip -4 rule add pref "$TPROXY_RULE_PREF" fwmark "$TPROXY_FW_MARK" table "$TPROXY_ROUTE_TABLE"
		fi
	fi
	if [ "$tun_enable" == 1 ]; then
		if [ "$ipv4_proxy" == 1 ]; then
			ip -4 route add unicast default dev "$tun_device" table "$TUN_ROUTE_TABLE"
			ip -4 rule add pref "$TUN_RULE_PREF" fwmark "$TUN_FW_MARK" table "$TUN_ROUTE_TABLE"
		fi
		if [ "$ipv6_proxy" == 1 ]; then
			ip -6 route add unicast default dev "$tun_device" table "$TUN_ROUTE_TABLE"
			ip -4 rule add pref "$TUN_RULE_PREF" fwmark "$TUN_FW_MARK" table "$TUN_ROUTE_TABLE"
		fi
		$FIREWALL_INCLUDE_SH
	fi
	utpl -D nikki_group="$NIKKI_GROUP" -D tproxy_fw_mark="$TPROXY_FW_MARK" -D tun_fw_mark="$TUN_FW_MARK" -S "$HIJACK_UT" | nft -f -
	nft -f "$RESERVED_IP_NFT"
	nft -f "$RESERVED_IP6_NFT"
	# dns hijack
	if [ "$ipv4_dns_hijack" == 1 ]; then
		log "Transparent Proxy" "Hijack IPv4 dns request."
	fi
	if [ "$ipv6_dns_hijack" == 1 ]; then
		log "Transparent Proxy" "Hijack IPv6 dns request."
	fi
	# proxy
	if [ "$ipv4_proxy" == 1 ]; then
		log "Transparent Proxy" "Proxy IPv4 traffic."
	fi
	if [ "$ipv6_proxy" == 1 ]; then
		log "Transparent Proxy" "Proxy IPv6 traffic."
	fi
	# bypass
	if [  -n "$bypass_user" ]; then
		log "Transparent Proxy" "Bypass user: $bypass_user."
	fi
	if [  -n "$bypass_group" ]; then
		log "Transparent Proxy" "Bypass group: $bypass_group."
	fi
	if [ "$bypass_china_mainland_ip" == 1 ]; then
		log "Transparent Proxy" "Bypass china mainland ip."
		if [ "$ipv4_proxy" == 1 ]; then
			nft -f "$GEOIP_CN_NFT"
		fi
		if [ "$ipv6_proxy" == 1 ]; then
			nft -f "$GEOIP6_CN_NFT"
		fi
	fi
	log "Transparent Proxy" "Destination TCP Port to Proxy: $proxy_tcp_dport."
	log "Transparent Proxy" "Destination UDP Port to Proxy: $proxy_udp_dport."
	if [ -n "$bypass_dscp" ]; then
		log "Transparent Proxy" "Bypass DSCP: $bypass_dscp."
	fi
	# router proxy
	if [ "$router_proxy" == 1 ]; then
		log "Transparent Proxy" "Set proxy for router."
	fi
	# lan proxy
	if [ "$lan_proxy" == 1 ]; then
		log "Transparent Proxy" "Set proxy for lan."
		# access control
		if [ "$access_control_mode" == "all" ]; then
			log "Transparent Proxy" "Access Control is using all mode, set proxy for all client."
		elif [ "$access_control_mode" == "allow" ]; then
			log "Transparent Proxy" "Access Control is using allow mode, set proxy for client which is in acl."
		elif [ "$access_control_mode" == "block" ]; then
			log "Transparent Proxy" "Access Control is using block mode, set proxy for client which is not in acl."
		fi
	fi
	# fix compatible between tproxy and dockerd (kmod-br-netfilter)
	if [ "$tproxy_enable" == 1 ] && (lsmod | grep -q br_netfilter); then
		if [ "$ipv4_proxy" == 1 ]; then
			local bridge_nf_call_iptables; bridge_nf_call_iptables=$(sysctl -e -n net.bridge.bridge-nf-call-iptables)
			if [ "$bridge_nf_call_iptables" == 1 ]; then
				touch "$BRIDGE_NF_CALL_IPTABLES_FLAG"
				sysctl -q -w net.bridge.bridge-nf-call-iptables=0
			fi
		fi
		if [ "$ipv6_proxy" == 1 ]; then
			local bridge_nf_call_ip6tables; bridge_nf_call_ip6tables=$(sysctl -e -n net.bridge.bridge-nf-call-ip6tables)
			if [ "$bridge_nf_call_ip6tables" == 1 ]; then
				touch "$BRIDGE_NF_CALL_IP6TABLES_FLAG"
				sysctl -q -w net.bridge.bridge-nf-call-ip6tables=0
			fi
		fi
	fi
}

service_stopped() {
	cleanup
}

reload_service() {
	cleanup
	start
}

service_triggers() {
	procd_add_reload_trigger "nikki"
}

cleanup() {
	# clear log
	clear_log
	# delete routing policy
	ip -4 rule del table "$TPROXY_ROUTE_TABLE" > /dev/null 2>&1
	ip -4 rule del table "$TUN_ROUTE_TABLE" > /dev/null 2>&1
	ip -6 rule del table "$TPROXY_ROUTE_TABLE" > /dev/null 2>&1
	ip -6 rule del table "$TUN_ROUTE_TABLE" > /dev/null 2>&1
	# delete routing table
	ip -4 route flush table "$TPROXY_ROUTE_TABLE" > /dev/null 2>&1
	ip -4 route flush table "$TUN_ROUTE_TABLE" > /dev/null 2>&1
	ip -6 route flush table "$TPROXY_ROUTE_TABLE" > /dev/null 2>&1
	ip -6 route flush table "$TUN_ROUTE_TABLE" > /dev/null 2>&1
	# delete hijack
	nft delete table inet nikki > /dev/null 2>&1
	local handles handle
	handles=$(nft --json list table inet fw4 | yq -M '.nftables[] | select(has("rule")) | .rule | select(.chain == "input" and .comment == "nikki") | .handle')
	for handle in $handles; do
		nft delete rule inet fw4 input handle "$handle"
	done
	handles=$(nft --json list table inet fw4 | yq -M '.nftables[] | select(has("rule")) | .rule | select(.chain == "forward" and .comment == "nikki") | .handle')
	for handle in $handles; do
		nft delete rule inet fw4 forward handle "$handle"
	done
	# delete started flag
	rm -f "$STARTED_FLAG"
	# revert fix compatible between tproxy and dockerd (kmod-br-netfilter)
	if [ -f "$BRIDGE_NF_CALL_IPTABLES_FLAG" ]; then
		rm -f "$BRIDGE_NF_CALL_IPTABLES_FLAG"
		sysctl -q -w net.bridge.bridge-nf-call-iptables=1
	fi
	if [ -f "$BRIDGE_NF_CALL_IP6TABLES_FLAG" ]; then
		rm -f "$BRIDGE_NF_CALL_IP6TABLES_FLAG"
		sysctl -q -w net.bridge.bridge-nf-call-ip6tables=1
	fi
	# delete cron
	sed -i "/#nikki/d" "/etc/crontabs/root" > /dev/null 2>&1
	/etc/init.d/cron restart
}

mixin_authentications() {
	local section="$1"

	local enabled username password
	config_get_bool enabled "$section" "enabled" 0
	config_get username "$section" "username"
	config_get password "$section" "password"

	if [ "$enabled" == 0 ]; then
		return
	fi

	authentication="$username:$password" yq -M -i '.authentication += [strenv(authentication)]' "$RUN_PROFILE_PATH"
}

mixin_tun_dns_hijacks() {
	dns_hijack="$1" yq -M -i '.tun.dns-hijack += [strenv(dns_hijack)]' "$RUN_PROFILE_PATH"
}

mixin_fake_ip_filters() {
	domain_name="$1" yq -M -i '.dns.fake-ip-filter += [strenv(domain_name)]' "$RUN_PROFILE_PATH"
}

mixin_hosts() {
	local section="$1"

	local enabled domain_name
	config_get_bool enabled "$section" "enabled" 0
	config_get domain_name "$section" "domain_name"

	if [ "$enabled" == 0 ]; then
		return
	fi

	config_list_foreach "$section" "ip" mixin_host "$domain_name"
}

mixin_host() {
	ip="$1" domain_name="$2" yq -M -i '.hosts.[strenv(domain_name)] += [strenv(ip)]' "$RUN_PROFILE_PATH"
}

mixin_nameservers() {
	local section="$1"

	local enabled type
	config_get_bool enabled "$section" "enabled" 0
	config_get type "$section" "type"

	if [ "$enabled" == 0 ]; then
		return
	fi

	config_list_foreach "$section" "nameserver" mixin_nameserver "$type"
}

mixin_nameserver() {
	nameserver="$1" type="$2" yq -M -i '.dns.[strenv(type)] += [strenv(nameserver)]' "$RUN_PROFILE_PATH"
}

mixin_nameserver_policies() {
	local section="$1"

	local enabled matcher
	config_get_bool enabled "$section" "enabled" 0
	config_get matcher "$section" "matcher"

	if [ "$enabled" == 0 ]; then
		return
	fi

	config_list_foreach "$section" "nameserver" mixin_nameserver_policy "$matcher"
}

mixin_nameserver_policy() {
	nameserver="$1" matcher="$2" yq -M -i '.dns.nameserver-policy.[strenv(matcher)] += [strenv(nameserver)]' "$RUN_PROFILE_PATH"
}

mixin_sniffer_domain_names() {
	domain_name="$1" type="$2" yq -M -i '.sniffer.[strenv(type)] += [strenv(domain_name)]' "$RUN_PROFILE_PATH"
}

mixin_sniffs() {
	local section="$1"
	local enabled protocol overwrite_destination
	config_get_bool enabled "$section" "enabled" 0
	config_get protocol "$section" "protocol"
	config_get_bool overwrite_destination "$section" "overwrite_destination" 0
	if [ "$enabled" == 0 ]; then
		return
	fi
	protocol="$protocol" overwrite_destination="$overwrite_destination" yq -M -i '.sniffer.sniff.[strenv(protocol)].override-destination = env(overwrite_destination) == 1' "$RUN_PROFILE_PATH"
	config_list_foreach "$section" "port" mixin_sniff "$protocol"
}

mixin_sniff() {
	port="$1" protocol="$2" yq -M -i '.sniffer.sniff.[strenv(protocol)].ports += [env(port)]' "$RUN_PROFILE_PATH"
}

mixin_rule_providers() {
	local section="$1"
	local enabled
	config_get_bool enabled "$section" "enabled" 0
	if [ "$enabled" == 0 ]; then
		return
	fi
	local name type url node file_size_limit file_path file_format behavior update_interval
	config_get name "$section" "name"
	config_get type "$section" "type"
	config_get url "$section" "url"
	config_get node "$section" "node"
	config_get file_size_limit "$section" "file_size_limit" 0
	config_get file_path "$section" "file_path"
	config_get file_format "$section" "file_format"
	config_get behavior "$section" "behavior"
	config_get update_interval "$section" "update_interval" 0
	if [ "$type" == "http" ]; then
		name="$name" type="$type" url="$url" node="$node" file_size_limit="$file_size_limit" file_format="$file_format" behavior="$behavior" update_interval="$update_interval" \
		yq -M -i '
		.rule-providers.[strenv(name)].type = strenv(type) |
		.rule-providers.[strenv(name)].url = strenv(url) |
		.rule-providers.[strenv(name)].proxy = strenv(node) |
		.rule-providers.[strenv(name)].size_limit = env(file_size_limit) |
		.rule-providers.[strenv(name)].format = strenv(file_format) |
		.rule-providers.[strenv(name)].behavior = strenv(behavior) |
		.rule-providers.[strenv(name)].interval = env(update_interval)
		' "$RUN_PROFILE_PATH"
	elif [ "$type" == "file" ]; then
		name="$name" type="$type" file_path="$file_path" file_format="$file_format" behavior="$behavior" \
		yq -M -i '
		.rule-providers.[strenv(name)].type = strenv(type) |
		.rule-providers.[strenv(name)].path = strenv(file_path) |
		.rule-providers.[strenv(name)].format = strenv(file_format) |
		.rule-providers.[strenv(name)].behavior = strenv(behavior)
		' "$RUN_PROFILE_PATH"
	fi
}

mixin_rules() {
	local section="$1"
	local enabled
	config_get_bool enabled "$section" "enabled" 0
	if [ "$enabled" == 0 ]; then
		return
	fi
	local type match node no_resolve
	config_get type "$section" "type"
	config_get match "$section" "match"
	config_get node "$section" "node"
	config_get_bool no_resolve "$section" "no_resolve" 0
	local rule
	if [ -z "$type" ]; then
		rule="$match,$node" 
	else
		rule="$type,$match,$node"
	fi
	if [ "$no_resolve" == 1 ]; then
		rule="$rule,no-resolve"
	fi
	rule="$rule" yq -M -i '.nikki-rules += [strenv(rule)]' "$RUN_PROFILE_PATH"
}

update_subscription() {
	local subscription_section; subscription_section="$1"
	if [ -z "$subscription_section" ]; then
		return
	fi
	# load config
	config_load nikki
	# get subscription config
	local subscription_name subscription_url subscription_user_agent
	config_get subscription_name "$subscription_section" "name"
	config_get subscription_url "$subscription_section" "url"
	config_get subscription_user_agent "$subscription_section" "user_agent"
	# reset subscription info
	uci_remove "nikki" "$subscription_section" "expire"
	uci_remove "nikki" "$subscription_section" "upload"
	uci_remove "nikki" "$subscription_section" "download"
	uci_remove "nikki" "$subscription_section" "total"
	uci_remove "nikki" "$subscription_section" "used"
	uci_remove "nikki" "$subscription_section" "avaliable"
	uci_remove "nikki" "$subscription_section" "update"
	uci_remove "nikki" "$subscription_section" "success"
	# update subscription
	log "Profile" "Update subscription: $subscription_name."
	local subscription_header_tmpfile; subscription_header_tmpfile="/tmp/$subscription_section.header"
	local subscription_tmpfile; subscription_tmpfile="/tmp/$subscription_section.yaml"
	local subscription_file; subscription_file="$SUBSCRIPTIONS_DIR/$subscription_section.yaml"
	if (curl -s -f --connect-timeout 15 --retry 3 -L -X GET -A "$subscription_user_agent" -D "$subscription_header_tmpfile" -o "$subscription_tmpfile" "$subscription_url"); then
		log "Profile" "Subscription update successful."
		local subscription_expire subscription_upload subscription_download subscription_total subscription_used subscription_avaliable
		subscription_expire=$(grep "subscription-userinfo: " "$subscription_header_tmpfile" | grep -o -E "expire=[[:digit:]]+" | cut -d '=' -f 2)
		subscription_upload=$(grep "subscription-userinfo: " "$subscription_header_tmpfile" | grep -o -E "upload=[[:digit:]]+" | cut -d '=' -f 2)
		subscription_download=$(grep "subscription-userinfo: " "$subscription_header_tmpfile" | grep -o -E "download=[[:digit:]]+" | cut -d '=' -f 2)
		subscription_total=$(grep "subscription-userinfo: " "$subscription_header_tmpfile" | grep -o -E "total=[[:digit:]]+" | cut -d '=' -f 2)
		if [[ -n "$subscription_upload" && -n "$subscription_download" ]]; then
			subscription_used=$((subscription_upload + subscription_download))
			if [ -n "$subscription_total" ]; then
				subscription_avaliable=$((subscription_total - subscription_upload - subscription_download))
			fi
		fi
		# update subscription info
		if [ -n "$subscription_expire" ]; then
			uci_set "nikki" "$subscription_section" "expire" "$(date "+%Y-%m-%d %H:%M:%S" -d @$subscription_expire)"
		fi
		if [ -n "$subscription_upload" ]; then
			uci_set "nikki" "$subscription_section" "upload" "$(format_filesize $subscription_upload)"
		fi
		if [ -n "$subscription_download" ]; then
			uci_set "nikki" "$subscription_section" "download" "$(format_filesize $subscription_download)"
		fi
		if [ -n "$subscription_total" ]; then
			uci_set "nikki" "$subscription_section" "total" "$(format_filesize $subscription_total)"
		fi
		if [ -n "$subscription_used" ]; then
			uci_set "nikki" "$subscription_section" "used" "$(format_filesize $subscription_used)"
		fi
		if [ -n "$subscription_avaliable" ]; then
			uci_set "nikki" "$subscription_section" "avaliable" "$(format_filesize $subscription_avaliable)"
		fi
		uci_set "nikki" "$subscription_section" "update" "$(date "+%Y-%m-%d %H:%M:%S")"
		uci_set "nikki" "$subscription_section" "success" "1"
		# update subscription file
		rm -f "$subscription_header_tmpfile"
		mv -f "$subscription_tmpfile" "$subscription_file"
	else
		log "Profile" "Subscription update failed."
		# update subscription info
		uci_set "nikki" "$subscription_section" "success" "0"
		# remove tmpfile
		rm -f "$subscription_header_tmpfile"
		rm -f "$subscription_tmpfile"
	fi
	uci_commit "nikki"
}
